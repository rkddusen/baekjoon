// 입력값 저장
// N은 n에 저장
const file = process.platform === "linux" ? "/dev/stdin" : "example.txt";
const input = require("fs").readFileSync(file).toString().trim();

const n = Number(input);
// dp 배열 생성
// dp[i]는 i번째가 0인 경우 -> 결국 n + 1이 0이 되는 값을 찾아야 함
// dp[i][0]은 i번째가 0인데, i-1번째까지 2가 안나온 경우
// dp[i][1]은 i번째가 0인데, i-1번째까지 2가 나온 경우
const dp = Array.from({ length: n + 1 }, () => []);
dp[0][0] = 1;
dp[0][1] = 0;
dp[1][0] = 1;
dp[1][1] = 0;
if (n > 1) {
  dp[2][0] = 2;
  dp[2][1] = 1;

  // n+1번째 dp값 구하기
  for (let i = 3; i < n + 1; i++) {
    // dp[i][0]은 i번째가 0인데, i-1번째까지 2가 안나온 경우
    // 결국 i번째가 0이 가능할라면 총 3가지 경우가 필요
    // 1. i-1번째가 0이고, 2가 안나온 경우 = dp[i - 1][0]
    // 2. i-1번째가 1이고, i-2번째가 0이고, 2가 안나온 경우 = dp[i - 2][0]
    // 3. i-1번째가 1이고, i-2번쨰가 1이고, i-3번째가 0이고, 2가 안나온 경우 = dp[i - 3][0]
    dp[i][0] = dp[i - 3][0] + dp[i - 2][0] + dp[i - 1][0];
    dp[i][0] %= 1000000007;

    // dp[i][1]은 i번째가 1인데, i-1번째까지 2가 나온 경우
    // 결국 i번째가 0이 가능할라면 총 3가지 경우가 필요
    // 1. i-1번째가 0이고 2가 나온 경우 = dp[i - 1][1]
    // 2-1. i-2번째가 0이고 2가 안나온 경우 i-1번째가 2인 경우 = dp[i - 2][0]
    // 2-2. i-2번쨰가 0이고 2가 나온 경우 i-1번째가 1 or 2인 경우 = 2 * dp[i - 2][1]
    // 3-1. i-3번째가 0이고 2가 안나온 경우 (i-2, i-1번째)가 각각 (2, 1) or (1, 2)인 경우 = 2 * dp[i - 3][0]
    // 3-1. i-3번째가 0이고 2가 나온 경우 (i-2, i-1번째)가 각각 (1, 1) or (2, 1) or (1, 2)인 경우 = 3 * dp[i - 3][1]
    dp[i][1] =
      dp[i - 1][1] +
      dp[i - 2][0] +
      2 * dp[i - 2][1] +
      2 * dp[i - 3][0] +
      3 * dp[i - 3][1];
    dp[i][1] %= 1000000007;
  }

  console.log(dp[n][1]);
} else {
  console.log(dp[n][1]);
}
